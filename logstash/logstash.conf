input {
 file {
  type => "jun_logs"
  path => [ "/var/log/jun.log" ]
  exclude => [ "*.gz", "*.zip", "*.rar" ]
  start_position => "beginning"
  stat_interval => 10
  discover_interval => 30
  }
}

filter {
 grok {
  match => { "message" => "%{SYSLOGTIMESTAMP:date} %{IP:device_ip} %{HOSTNAME:device_name}: %{GREEDYDATA:syslog_message}" }
}
 mutate {
  replace => [ "@message", "%{syslog_message}" ]
}

if [@message] =~ /^RT_FLOW: RT_FLOW_SESSION_CREATE/ {
 grok {
  match => { "message" => "%{DATA:prefix}(?:[%{POSINT}])?: %{DATA:prefix_status}: %{DATA:reason_message} %{IP:source_ip}/%{NUMBER:source_port}->%{IP:destination_ip}/%{NUMBER:destination_port} %{DATA:service_name} %{IP:nat_source_ip}/%{NUMBER:nat_source_port}->%{IP:nat_destination_ip}/%{NUMBER:nat_destination_port} %{DATA:src_nat_rule_name} %{DATA:destination_nat_rule_name} %{NUMBER:protocol_id} %{DATA:policy_name} %{DATA:source_zone} %{DATA:destination_zone} %{NUMBER:session_id}" }
  remove_field => [ "@message" ]
  add_tag => ["SESSION_CREATE"]
}
}

if [@message] =~ "RT_FLOW: RT_FLOW_SESSION_CLOSE" {
 grok {
  match => { "message" => "%{DATA:prefix}(?:[%{POSINT}])?: %{DATA:prefix_status}: %{DATA:reason_message}: %{IP:source_ip}/%{NUMBER:source_port}->%{IP:destination_ip}/%{NUMBER:destination_port} %{DATA:service_name} %{IP:nat_source_ip}/%{NUMBER:nat_source_port}->%{IP:nat_destination_ip}/%{NUMBER:nat_destination_port} %{DATA:source_nat_rule_name} %{DATA:destination_nat_rule_name} %{NUMBER:protocol_id} %{DATA:policy_name} %{DATA:source_zone} %{DATA:destination_zone} %{NUMBER:session_id} %{NUMBER:packets_from_client}\(%{NUMBER:bytes_from_client:int}\) %{NUMBER:packets_from_server}\(%{NUMBER:bytes_from_server:int}\) %{NUMBER:elapsed_time}" }
  remove_field => [ "@message" ]
  add_tag => ["SESSION_CLOSE"]
}
}

if [@message] =~ /^RT_IDS: RT_SCREEN_IP/ {
 grok {
  match => { "message" => "%{DATA:prefix}(?:[%{POSINT}])?: %{DATA:prefix_status}: %{DATA:operation}! source: %{IP:source_ip}, destination: %{IP:destination_ip}, protocol-id: %{NUMBER:protocol_id}, zone name: %{DATA:zone}, interface name: %{DATA:interface}, action: %{GREEDYDATA:action}" }
  remove_field => [ "@message" ]
  add_tag => ["RT_SCREEN_IP"]
}
}

if [@message] =~ /^RT_IDS: RT_SCREEN_UDP/ {
 grok {
  match => { "message" => "%{DATA:prefix}(?:[%{POSINT}])?: %{DATA:prefix_status}: %{DATA:operation}! source: %{IP:source_ip}:%{NUMBER:source_port}, destination: %{IP:destination_ip}:%{NUMBER:destination_port}, zone name: %{DATA:zone}, interface name: %{DATA:interface}, action: %{GREEDYDATA:action}" }
  remove_field => [ "@message" ]
  add_tag => ["RT_SCREEN_UDP"]
}
}

if [@message] =~ /^fwdd/ {
 grok {
  match => { "message" => "%{DATA:prefix}(?:[%{POSINT}])?: %{DATA:prefix_status}: %{DATA:operation}: %{DATA:interface}  %{DATA:status}  %{DATA:proto} %{IP:source_ip} %{IP:destination_ip} %{NUMBER:frome_port} %{NUMBER:to_port} %{GREEDYDATA:packets_from_server}" }
  remove_field => [ "@message" ]
  add_tag => ["fwdd"]
}
}

if "fwdd" in [tags] and "D" in [status] {
 geoip {
                source => "source_ip"
                target => "geoip"
                database => "/usr/share/logstash/GeoLite2_City.mmdb"
                add_field => [ "[geoip][coordinates]", "%{[geoip][longitude]}" ]
                add_field => [ "[geoip][coordinates]", "%{[geoip][latitude]}"  ]
        }
}
################################### ^ GeoLite2 data created by MaxMind, available from https://www.maxmind.com 
  mutate {
   convert => [ "[geoip][coordinates]", "float"]
}

if "SESSION_CLOSE" in [tags] {
 dns { 
  reverse => [ "destination_ip", "source_ip" ]


}
}
}



output {
 elasticsearch {
  hosts => "elasticsearch:9200"
   template => "/usr/share/logstash/vendor/bundle/jruby/2.5.0/gems/logstash-output-elasticsearch-9.4.0-java/lib/logstash/outputs/elasticsearch/elasticsearch-template-es6x.json"
   manage_template => true
   template_name => "jun_logs"
   template_overwrite => true
   index => "jun_logs"
  }
}
